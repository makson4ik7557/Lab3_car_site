<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Lab_3_serv/repo_practice/demo.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab_3_serv/repo_practice/demo.py" />
              <option name="originalContent" value="import os&#10;import django&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Lab_3_serv.settings')&#10;django.setup()&#10;&#10;from repo_practice.services.repo_service import repository_service&#10;&#10;&#10;def demonstrate_repository():&#10;    print(&quot;Патерн Репозиторій\n&quot;)&#10;&#10;    try:&#10;        from django.db import connection&#10;        with connection.cursor() as cursor:&#10;            cursor.execute(&quot;SELECT 1&quot;)&#10;&#10;        print(&quot;АВТОМОБІЛІ&quot;)&#10;&#10;        new_car = repository_service.create_car(&#10;            make=&quot;Toyota&quot;,&#10;            model=&quot;Camry&quot;,&#10;            year=2023,&#10;            price=25000.00,&#10;            in_stock=True&#10;        )&#10;        print(f&quot;Створено новий автомобіль: {new_car}&quot;)&#10;&#10;        all_cars = repository_service.get_all_cars()&#10;        print(f&quot;Всього автомобілів у БД: {len(all_cars)}&quot;)&#10;        for car in all_cars[:5]:&#10;            print(f&quot;  - {car.make} {car.model} {car.year} - ${car.price}&quot;)&#10;&#10;        print(&quot;\nКЛІЄНТИ&quot;)&#10;&#10;        new_customer = repository_service.create_customer(&#10;            first_name=&quot;Іван&quot;,&#10;            last_name=&quot;Петренко&quot;,&#10;            email=&quot;ivan@example.com&quot;,&#10;            phone=&quot;+380501234567&quot;&#10;        )&#10;        print(f&quot;Створено нового клієнта: {new_customer}&quot;)&#10;&#10;        all_customers = repository_service.get_all_customers()&#10;        print(f&quot;Всього клієнтів у БД: {len(all_customers)}&quot;)&#10;&#10;        print(&quot;\nПРАЦІВНИКИ&quot;)&#10;&#10;        new_employee = repository_service.create_employee(&#10;            first_name=&quot;Марія&quot;,&#10;            last_name=&quot;Іваненко&quot;,&#10;            position=&quot;Менеджер з продажів&quot;,&#10;            hire_date=&quot;2023-01-15&quot;&#10;        )&#10;        print(f&quot;Створено нового працівника: {new_employee}&quot;)&#10;&#10;        all_employees = repository_service.get_all_employees()&#10;        print(f&quot;Всього працівників у БД: {len(all_employees)}&quot;)&#10;&#10;        print(&quot;\nПОШУК ПО ID&quot;)&#10;        car_by_id = repository_service.get_car_by_id(1)&#10;        if car_by_id:&#10;            print(f&quot;Знайдено автомобіль по ID 1: {car_by_id}&quot;)&#10;        else:&#10;            print(&quot;Автомобіль з ID 1 не знайдено&quot;)&#10;&#10;        print(&quot;\nДОСТУПНІ АВТОМОБІЛІ&quot;)&#10;        available_cars = repository_service.get_available_cars()&#10;        print(f&quot;Доступних автомобілів: {len(available_cars)}&quot;)&#10;&#10;        print(&quot;\nДемонстрація успішно завершена&quot;)&#10;&#10;    except Exception as e:&#10;        print(f&quot;Помилка під час демонстрації: {e}&quot;)&#10;        import traceback&#10;        traceback.print_exc()&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    demonstrate_repository()" />
              <option name="updatedContent" value="import os&#10;import django&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Lab_3_serv.settings')&#10;django.setup()&#10;&#10;from repo_practice.services.repo_service import repository_service&#10;&#10;&#10;def demonstrate_repository():&#10;    print(&quot;=&quot; * 50)&#10;    print(&quot;Демонстрація патерну Repository&quot;)&#10;    print(&quot;=&quot; * 50)&#10;&#10;    print(&quot;\n--- Автомобілі BMW ---&quot;)&#10;    bmw_cars = repository_service.car_repository.get_cars_by_make('BMW')&#10;    for car in bmw_cars:&#10;        print(f&quot;{car.model} ({car.year}) - ${car.price}&quot;)&#10;&#10;    print(&quot;\n--- Автомобілі Porsche ---&quot;)&#10;    porsche_cars = repository_service.car_repository.get_cars_by_make('Porsche')&#10;    for car in porsche_cars:&#10;        print(f&quot;{car.model} ({car.year}) - ${car.price}&quot;)&#10;&#10;    print(&quot;\n--- Преміум автомобілі (&gt;$80000) ---&quot;)&#10;    premium = repository_service.car_repository.get_premium_cars()&#10;    for car in premium:&#10;        print(f&quot;{car.make} {car.model} - ${car.price}&quot;)&#10;&#10;    print(&quot;\n--- Найдорожчий автомобіль ---&quot;)&#10;    expensive = repository_service.car_repository.get_most_expensive()&#10;    if expensive:&#10;        print(f&quot;{expensive.make} {expensive.model} - ${expensive.price}&quot;)&#10;&#10;    print(&quot;\n--- Найдешевший автомобіль ---&quot;)&#10;    cheap = repository_service.car_repository.get_cheapest()&#10;    if cheap:&#10;        print(f&quot;{cheap.make} {cheap.model} - ${cheap.price}&quot;)&#10;&#10;    print(&quot;\n--- Всі клієнти ---&quot;)&#10;    customers = repository_service.get_all_customers()&#10;    print(f&quot;Кількість клієнтів: {len(customers)}&quot;)&#10;    for customer in customers:&#10;        print(f&quot;{customer.first_name} {customer.last_name} - {customer.email}&quot;)&#10;&#10;    print(&quot;\n--- Всі працівники ---&quot;)&#10;    employees = repository_service.get_all_employees()&#10;    print(f&quot;Кількість працівників: {len(employees)}&quot;)&#10;    for emp in employees:&#10;        print(f&quot;{emp.first_name} {emp.last_name} - {emp.position}&quot;)&#10;&#10;    print(&quot;\n&quot; + &quot;=&quot; * 50)&#10;    print(&quot;Демонстрація завершена&quot;)&#10;    print(&quot;=&quot; * 50)&#10;&#10;&#10;if __name__ == '__main__':&#10;    demonstrate_repository()&#10;            position=&quot;Менеджер з продажів&quot;,&#10;            hire_date=&quot;2023-01-15&quot;&#10;        )&#10;        print(f&quot;Створено нового працівника: {new_employee}&quot;)&#10;&#10;        all_employees = repository_service.get_all_employees()&#10;        print(f&quot;Всього працівників у БД: {len(all_employees)}&quot;)&#10;&#10;        print(&quot;\nПОШУК ПО ID&quot;)&#10;        car_by_id = repository_service.get_car_by_id(1)&#10;        if car_by_id:&#10;            print(f&quot;Знайдено автомобіль по ID 1: {car_by_id}&quot;)&#10;        else:&#10;            print(&quot;Автомобіль з ID 1 не знайдено&quot;)&#10;&#10;        print(&quot;\nДОСТУПНІ АВТОМОБІЛІ&quot;)&#10;        available_cars = repository_service.get_available_cars()&#10;        print(f&quot;Доступних автомобілів: {len(available_cars)}&quot;)&#10;&#10;        print(&quot;\nДемонстрація успішно завершена&quot;)&#10;&#10;    except Exception as e:&#10;        print(f&quot;Помилка під час демонстрації: {e}&quot;)&#10;        import traceback&#10;        traceback.print_exc()&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    demonstrate_repository()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab_3_serv/repo_practice/repositories/car_repo.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab_3_serv/repo_practice/repositories/car_repo.py" />
              <option name="originalContent" value="from typing import List, Optional&#10;from ..models import Car&#10;from .base_repo import BaseRepository&#10;&#10;&#10;class CarRepository(BaseRepository[Car]):&#10;    def get_all(self) -&gt; List[Car]:&#10;        return list(Car.objects.all())&#10;&#10;    def get_by_id(self, id: int) -&gt; Optional[Car]:&#10;        try:&#10;            return Car.objects.get(id=id)&#10;        except Car.DoesNotExist:&#10;            return None&#10;&#10;    def create(self, **kwargs) -&gt; Car:&#10;        return Car.objects.create(**kwargs)&#10;&#10;    def get_available_cars(self) -&gt; List[Car]:&#10;        return list(Car.objects.filter(in_stock=True))&#10;&#10;    def get_cars_by_make(self, make: str) -&gt; List[Car]:&#10;        return list(Car.objects.filter(make__iexact=make))" />
              <option name="updatedContent" value="from typing import List, Optional&#10;from ..models import Car&#10;from .base_repo import BaseRepository&#10;&#10;&#10;class CarRepository(BaseRepository[Car]):&#10;    def get_all(self) -&gt; List[Car]:&#10;        return list(Car.objects.all())&#10;&#10;    def get_by_id(self, id: int) -&gt; Optional[Car]:&#10;        try:&#10;            return Car.objects.get(id=id)&#10;        except Car.DoesNotExist:&#10;            return None&#10;&#10;    def create(self, **kwargs) -&gt; Car:&#10;        return Car.objects.create(**kwargs)&#10;&#10;    def get_available_cars(self) -&gt; List[Car]:&#10;        return list(Car.objects.filter(in_stock=True))&#10;&#10;    def get_cars_by_make(self, make: str) -&gt; List[Car]:&#10;        return list(Car.objects.filter(make__iexact=make))&#10;&#10;    def get_premium_cars(self, min_price: int = 80000) -&gt; List[Car]:&#10;        return list(Car.objects.filter(price__gte=min_price))&#10;&#10;    def get_cars_by_year_range(self, start_year: int, end_year: int) -&gt; List[Car]:&#10;        return list(Car.objects.filter(year__gte=start_year, year__lte=end_year))&#10;&#10;    def get_most_expensive(self) -&gt; Optional[Car]:&#10;        return Car.objects.order_by('-price').first()&#10;&#10;    def get_cheapest(self) -&gt; Optional[Car]:&#10;        return Car.objects.order_by('price').first()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Lab3_car_site&#10;&#10;## Патерн Repository&#10;&#10;Патерн Repository є структурним патерном, який створює проміжний шар між бізнес-логікою та шаром доступу до даних. Основна мета — забезпечити єдиний інтерфейс для роботи з даними незалежно від способу їх зберігання.&#10;&#10;## Принципи побудови&#10;&#10;**Абстракція доступу до даних**  &#10;Бізнес-логіка не знає деталей зберігання даних, а працює через інтерфейс репозиторію.&#10;&#10;**Централізація операцій**  &#10;Всі CRUD-операції (Create, Read, Update, Delete) виконуються через репозиторій.&#10;&#10;**Замінимість реалізації**  &#10;Можна змінити технологію зберігання без зміни бізнес-логіки.&#10;&#10;**Слабка зв'язність**  &#10;Бізнес-логіка залежить від інтерфейсу, а не від конкретної реалізації.&#10;&#10;## Приклад використання&#10;&#10;У проекті реалізовано систему управління автосалоном на Django. Основні сутності:&#10;&#10;- **Car** - інформація про автомобілі (марка, модель, рік, ціна, наявність)&#10;- **Customer** - дані про клієнтів (ім'я, прізвище, email, телефон)&#10;- **Employee** - інформація про співробітників (ім'я, прізвище, посада)&#10;- **Sale** - операції продажу (автомобіль, клієнт, співробітник, ціна продажу)&#10;&#10;### Структура репозиторіїв&#10;&#10;Для кожної сутності створено репозиторій, який наслідується від базового класу `BaseRepository`:&#10;&#10;**CarRepository** надає методи:&#10;- `get_all()` - отримати всі автомобілі&#10;- `get_by_id(id)` - пошук за ID&#10;- `create(**kwargs)` - створити новий автомобіль&#10;- `get_available_cars()` - отримати доступні автомобілі&#10;- `get_cars_by_make(make)` - пошук за маркою&#10;&#10;Аналогічно реалізовані:&#10;- `CustomerRepository` - робота з клієнтами&#10;- `EmployeeRepository` - робота зі співробітниками&#10;- `SaleRepository` - робота з продажами&#10;&#10;Бізнес-логіка взаємодіє тільки з репозиторіями, не використовуючи прямі ORM-запити.&#10;&#10;## Переваги&#10;&#10;- Централізація логіки доступу до даних&#10;- Можливість зміни технології зберігання&#10;- Покращена тестованість коду&#10;- Розділення відповідальностей (Separation of Concerns)&#10;- Зручність при масштабуванні проекту&#10;&#10;" />
              <option name="updatedContent" value="# Lab3_car_site&#10;&#10;## Патерн Repository&#10;&#10;Патерн Repository є структурним патерном, який створює проміжний шар між бізнес-логікою та шаром доступу до даних. Основна мета — забезпечити єдиний інтерфейс для роботи з даними незалежно від способу їх зберігання.&#10;&#10;## Принципи побудови&#10;&#10;**Абстракція доступу до даних**  &#10;Бізнес-логіка не знає деталей зберігання даних, а працює через інтерфейс репозиторію.&#10;&#10;**Централізація операцій**  &#10;Всі CRUD-операції (Create, Read, Update, Delete) виконуються через репозиторій.&#10;&#10;**Замінимість реалізації**  &#10;Можна змінити технологію зберігання без зміни бізнес-логіки.&#10;&#10;**Слабка зв'язність**  &#10;Бізнес-логіка залежить від інтерфейсу, а не від конкретної реалізації.&#10;&#10;## Приклад використання&#10;&#10;У проекті реалізовано систему управління автосалоном на Django. Основні сутності:&#10;&#10;- **Car** - інформація про автомобілі (марка, модель, рік, ціна, наявність)&#10;- **Customer** - дані про клієнтів (ім'я, прізвище, email, телефон)&#10;- **Employee** - інформація про співробітників (ім'я, прізвище, посада)&#10;- **Sale** - операції продажу (автомобіль, клієнт, співробітник, ціна продажу)&#10;&#10;### Структура репозиторіїв&#10;&#10;Для кожної сутності створено репозиторій, який наслідується від базового класу `BaseRepository`:&#10;&#10;**CarRepository** надає методи:&#10;- `get_all()` - отримати всі автомобілі&#10;- `get_by_id(id)` - пошук за ID&#10;- `create(**kwargs)` - створити новий автомобіль&#10;- `get_available_cars()` - отримати доступні автомобілі&#10;- `get_cars_by_make(make)` - пошук за маркою&#10;- `get_premium_cars(min_price)` - автомобілі вище вказаної ціни&#10;- `get_cars_by_year_range(start, end)` - пошук за діапазоном років&#10;- `get_most_expensive()` - найдорожчий автомобіль&#10;- `get_cheapest()` - найдешевший автомобіль&#10;&#10;Аналогічно реалізовані:&#10;- `CustomerRepository` - робота з клієнтами&#10;- `EmployeeRepository` - робота зі співробітниками&#10;- `SaleRepository` - робота з продажами&#10;&#10;Бізнес-логіка взаємодіє тільки з репозиторіями, не використовуючи прямі ORM-запити.&#10;&#10;### Дані в базі&#10;&#10;Проект містить реальні дані про автомобілі преміум-класу:&#10;- BMW (M5 Competition, X7 M60i, 3 Series, iX)&#10;- Porsche (911 Turbo S, Cayenne, Taycan, Macan)&#10;- Mercedes-Benz (AMG GT, S-Class)&#10;&#10;Для наповнення бази використовується скрипт `populate_db.py`.&#10;&#10;## Переваги&#10;&#10;- Централізація логіки доступу до даних&#10;- Можливість зміни технології зберігання&#10;- Покращена тестованість коду&#10;- Розділення відповідальностей (Separation of Concerns)&#10;- Зручність при масштабуванні проекту&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/commit_changes.ps1">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/commit_changes.ps1" />
              <option name="originalContent" value="# PowerShell script for committing changes&#10;Write-Host &quot;Changing directory...&quot; -ForegroundColor Cyan&#10;Set-Location &quot;D:\Lab3_car_site&quot;&#10;&#10;Write-Host &quot;`nChecking git status...&quot; -ForegroundColor Cyan&#10;git status&#10;&#10;Write-Host &quot;`nAdding README.md...&quot; -ForegroundColor Cyan&#10;git add README.md&#10;&#10;Write-Host &quot;`nCommitting changes...&quot; -ForegroundColor Cyan&#10;git commit -m &quot;Update README with Repository pattern description&quot;&#10;&#10;Write-Host &quot;`nPushing to GitHub...&quot; -ForegroundColor Cyan&#10;git push origin main&#10;&#10;Write-Host &quot;`nDone!&quot; -ForegroundColor Green&#10;Read-Host &quot;Press Enter to exit&quot;&#10;&#10;" />
              <option name="updatedContent" value="# PowerShell script for committing changes&#10;Write-Host &quot;Changing directory...&quot; -ForegroundColor Cyan&#10;Set-Location &quot;D:\Lab3_car_site&quot;&#10;&#10;Write-Host &quot;`nChecking git status...&quot; -ForegroundColor Cyan&#10;git status&#10;&#10;Write-Host &quot;`nAdding all changes...&quot; -ForegroundColor Cyan&#10;git add .&#10;&#10;Write-Host &quot;`nCommitting changes...&quot; -ForegroundColor Cyan&#10;git commit -m &quot;Add car data and repository improvements&quot;&#10;&#10;Write-Host &quot;`nPulling from GitHub...&quot; -ForegroundColor Cyan&#10;git pull origin main --rebase&#10;&#10;Write-Host &quot;`nPushing to GitHub...&quot; -ForegroundColor Cyan&#10;git push origin main&#10;&#10;Write-Host &quot;`nDone!&quot; -ForegroundColor Green&#10;Read-Host &quot;Press Enter to exit&quot;&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>